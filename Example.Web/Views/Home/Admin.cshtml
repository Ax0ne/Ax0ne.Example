@model Example.Domain.Models.Product

@{
    ViewBag.Title = "Admin";
}

<h2>Admin</h2>

<div class="content">
    <div class="float-left">
        <ul id="update-products" data-bind="foreach: products">
            <li>
                <div>
                    <div class="item">Product ID</div> <span data-bind="text: $data.Id"></span>
                </div>
                <div>
                    <div class="item">Name</div>
                    <input type="text" data-bind="value: $data.Name" />
                </div>
                <div>
                    <div class="item">Price ($)</div>  <!-- 这里的$表示的美元符字符 — 译者注 -->
                    <input type="text" data-bind="value: $data.Price" />
                </div>
                <div>
                    <div class="item">Actual Cost ($)</div>
                    <input type="text" data-bind="value: $data.ActualCost" />
                </div>
                <div>
                    <input type="button" value="Update" data-bind="click: $root.update" />
                    <input type="button" value="Delete Item" data-bind="click: $root.remove" />
                </div>
            </li>
        </ul>
    </div>
    <div class="float-right">
        <h2>Add New Product</h2>
        <form id="addProduct" data-bind="submit: create">
            @Html.ValidationSummary(true)
            <fieldset>
                <legend>Contact</legend>
                @Html.EditorForModel()
                <p>
                    <input type="submit" value="Save" />
                </p>
            </fieldset>
        </form>
    </div>
</div>
@section scripts{
    @Scripts.Render("~/bundles/jqueryval")
    <script type="text/javascript" src="@Url.Content("~/Scripts/knockout-3.1.0.js")"></script>
    <script type="text/javascript">
        function ProductsViewModel() {
            var self = this;
            self.products = ko.observableArray();

            var baseUri = '@ViewBag.ApiUrl';

            // New code
            // 新代码
            self.create = function (formElement) {
                // If the form data is valid, post the serialized form data to the web API.
                // 如果表单数据有效，把序列化的表单数据递交给Web API
                $(formElement).validate();
                if ($(formElement).valid()) {
                    $.post(baseUri, $(formElement).serialize(), null, "json")
                        .done(function (o) {
                            // Add the new product to the view-model.
                            // 将新产品添加到视图模型
                            self.products.push(o);
                        });
                }
            }

            self.update = function (product) {
                $.ajax({ type: "PUT", url: baseUri + '/' + product.Id, data: product });
            }

            self.remove = function (product) {
                // First remove from the server, then from the view-model.
                // 首先从服务器删除，然后从视图模型删除
                $.ajax({ type: "DELETE", url: baseUri + '/' + product.Id })
                    .done(function () { self.products.remove(product); });
            }

            $.getJSON(baseUri, self.products);
        }
        $(document).ready(function () {
            ko.applyBindings(new ProductsViewModel());
        })
    </script> 
}